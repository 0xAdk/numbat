### Mathematical constants

let pi = 3.14159265358979323846264338327950288
let π = pi
let e = 2.71828182845904523536028747135266250
let ½ = 1/2
let ¼ = 1/4

### Physical dimensions

dimension Scalar = 1

dimension Length
dimension Area = Length^2
dimension Volume = Length^3

dimension Time
dimension Frequency = Time^(-1)
dimension Speed = Length / Time
dimension Acceleration = Length / Time^2

dimension Mass
dimension Momentum = Mass * Speed
dimension Force = Mass * Acceleration = Momentum / Time
dimension Energy = Momentum^2 / Mass = Mass * Speed^2 = Force * Length
dimension Power = Energy / Time = Force * Speed
dimension Pressure = Force / Area = Energy / Volume
dimension Action = Energy * Time
dimension MassDensity = Mass / Length^3

dimension Current
dimension Charge = Current * Time
dimension Voltage = Energy / Charge = Power / Current
dimension Capacitance = Charge / Voltage
dimension Resistance = Voltage / Current

dimension Temperature

### SI Units

@metric_prefixes
@aliases(meters, metre, metres)
@aliases_short(m)
unit meter: Length

@metric_prefixes
@aliases(seconds)
@aliases_short(s)
unit second: Time

@metric_prefixes
@aliases(grams, gramme, grammes)
@aliases_short(g)
unit gram: Mass

@metric_prefixes
@aliases_short(Hz)
unit hertz: Frequency = 1 / second

@metric_prefixes
@aliases(newtons)
@aliases_short(N)
unit newton: Force = kilogram meter / second^2

@metric_prefixes
@aliases(joules)
@aliases_short(J)
unit joule: Energy = newton meter

@metric_prefixes
@aliases(watts)
@aliases_short(W)
unit watt: Power = joule / second

@metric_prefixes
@aliases(pascals)
@aliases_short(Pa)
unit pascal: Pressure = newton / meter^2

@metric_prefixes
@aliases(amperes)
@aliases_short(A)
unit ampere: Current

@metric_prefixes
@aliases(coulombs)
@aliases_short(C)
unit coulomb: Charge = ampere second

@metric_prefixes
@aliases(volts)
@aliases_short(V)
unit volt: Voltage = kilogram meter^2 / (second^3 ampere)

@metric_prefixes
@aliases(farads)
@aliases_short(F)
unit farad: Capacitance = coulomb / volt

@metric_prefixes
@aliases(ohms)
@aliases_short(Ω)
unit ohm: Resistance = volt / ampere

@metric_prefixes
@aliases(kelvins)
@aliases_short(K)
unit kelvin : Temperature

## SI accepted units

@metric_prefixes
@aliases(radians)
@aliases_short(rad)
unit radian = meter / meter # TODO

@aliases(degrees)
@aliases_short(deg, °)
unit degree = π radian / 180

@metric_prefixes
@aliases(litres, liter, liters)
unit litre = 1 dm^3

### Time units

@aliases(minutes)
@aliases_short(min)
unit minute: Time = 60 seconds

@aliases(hours)
@aliases_short(h)
unit hour: Time = 60 minutes

@aliases(days)
unit day: Time = 24 hours

@aliases(weeks)
unit week: Time = 7 days

@aliases(years)
unit year: Time = 365.2425 days

@aliases(months)
unit month: Time = year / 12

### Other units

dimension Bit

@metric_prefixes
@binary_prefixes
@aliases(bits)
unit bit: Bit    # TODO: with this definition, we can not use 'Mbit', only 'megabit'.

@metric_prefixes
@binary_prefixes
@aliases(bytes,octet,octets)
@aliases_short(B)
unit byte: Bit = 8 bit

### Imperial units

@aliases(inches)
@aliases_short(in)
unit inch: Length = 0.0254 meter

@aliases(feet)
@aliases_short(ft)
unit foot: Length = 0.3048 meter
assert_eq(1 foot, 12 inches, 0.001 inch)

@aliases(yards)
@aliases_short(yd)
unit yard: Length = 0.9144 meter
assert_eq(1 yard, 3 feet, 0.001 foot)

@aliases(miles)
@aliases_short(mi)
unit mile: Length = 1609.344 meter
assert_eq(1 mile, 1760 yard, 0.001 yard)

# Other misc units (TODO: clean up)

@aliases(knots)
unit knot: Speed = 463 m / 900 s

@aliases(fathoms)
unit fathom: Length = 2 yard

@aliases(furlongs)
unit furlong: Length = 220 yard


### Commonly used non-standard abbreviations

unit mph = miles per hour
unit kph = kilometer per hour
unit sec = second

### Physical constants

let gravity = 9.80665 meter / second^2
let speed_of_light = 299792458 meter / second

## Mathematical functions

# TODO: implement these as foreign functions? => benchmark
fn sqrt<D>(x: D^2) -> D = x^(1/2)
fn sqr<D>(x: D) -> D^2 = x^2
fn exp(x: Scalar) -> Scalar = e^x

# Foreign functions

fn abs<T>(x: T) -> T
fn round<T>(x: T) -> T
fn sin(x: Scalar) -> Scalar
fn atan2<T>(y: T, x: T) -> Scalar

### Physics functions

fn fromCelsius(t_celsius: Scalar) -> Temperature = (t_celsius + 273.15) kelvin
fn toCelsius(t_kelvin: Temperature) -> Scalar = t_kelvin / kelvin - 273.15
